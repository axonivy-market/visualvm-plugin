/*
 * To change this template, choose Tools | Templates and open the template in the editor.
 */
package ch.ivyteam.ivy.visualvm.view;

import ch.ivyteam.ivy.visualvm.ContentProvider;
import ch.ivyteam.ivy.visualvm.exception.IvyJmxDataCollectException;
import ch.ivyteam.ivy.visualvm.model.IvyApplicationInfo;
import ch.ivyteam.ivy.visualvm.model.OSInfo;
import ch.ivyteam.ivy.visualvm.model.ServerConnectorInfo;
import ch.ivyteam.ivy.visualvm.model.SystemDatabaseInfo;
import ch.ivyteam.ivy.visualvm.service.BasicIvyJmxDataCollector;
import ch.ivyteam.ivy.visualvm.util.DataUtils;
import java.util.List;
import java.util.logging.Logger;
import javax.management.MBeanServerConnection;
import javax.swing.JComponent;
import javax.swing.JPanel;
import org.apache.commons.lang.StringUtils;
import org.openide.util.NbBundle.Messages;

@Messages({"CTL_InformationPanelAction=InformationPanel",
  "CTL_InformationPanelTopComponent=InformationPanel Window",
  "HINT_InformationPanelTopComponent=This is a InformationPanel window"})
@SuppressWarnings("PMD.SingularField")
public final class InformationPanelTopComponent extends JPanel {

  private static final Logger LOGGER = Logger.getLogger(InformationPanelTopComponent.class.getName());
  private static final String TABLE_START = "<table border='0' celspacing='5' celpadding='0'>";
  private static final String TABLE_END = "</table>";
  private static final String TR_TD_START_WITH_NO_WRAP = "<tr style='white-space: nowrap;'><td>";
  private static final String TD_TR_END = "</td></tr>";
  private static final String TD_START = "<td>";
  private static final String TD_END = "</td>";

  private static final char CHAR_COLON = ':';
  private static final char CHAR_SPACE = ' ';

  public InformationPanelTopComponent() {
    initComponents();
    setName(Bundle.CTL_InformationPanelTopComponent());
    setToolTipText(Bundle.HINT_InformationPanelTopComponent());
  }

  /*
   * CHECKSTYLE:OFF
   */
  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
   * code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("PMD")
  // <editor-fold defaultstate="collapsed"
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    generalPanel = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    htmlLabelPanel1 = new ch.ivyteam.ivy.visualvm.view.HtmlLabelPanel();
    sysDbPanel = new javax.swing.JPanel();
    jScrollPane2 = new javax.swing.JScrollPane();
    htmlLabelPanel2 = new ch.ivyteam.ivy.visualvm.view.HtmlLabelPanel();
    connectorsContainPanel = new javax.swing.JPanel();
    jScrollPane3 = new javax.swing.JScrollPane();
    htmlLabelPanel3 = new ch.ivyteam.ivy.visualvm.view.HtmlLabelPanel();

    setLayout(new java.awt.GridBagLayout());

    generalPanel.setBackground(new java.awt.Color(255, 255, 255));
    generalPanel.setMinimumSize(new java.awt.Dimension(200, 80));
    generalPanel.setPreferredSize(new java.awt.Dimension(200, 130));
    generalPanel.setLayout(new java.awt.GridBagLayout());

    jScrollPane1.setBorder(null);

    htmlLabelPanel1.setBorder(null);
    htmlLabelPanel1.setMinimumSize(new java.awt.Dimension(6, 6));
    htmlLabelPanel1.setPreferredSize(new java.awt.Dimension(6, 6));
    jScrollPane1.setViewportView(htmlLabelPanel1);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 0.01;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    generalPanel.add(jScrollPane1, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 5);
    add(generalPanel, gridBagConstraints);

    sysDbPanel.setBackground(new java.awt.Color(255, 255, 255));
    sysDbPanel.setMinimumSize(new java.awt.Dimension(500, 230));
    sysDbPanel.setPreferredSize(new java.awt.Dimension(220, 250));
    sysDbPanel.setLayout(new java.awt.GridBagLayout());

    jScrollPane2.setBorder(null);
    jScrollPane2.setViewportView(htmlLabelPanel2);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 0.01;
    gridBagConstraints.weighty = 1.0;
    sysDbPanel.add(jScrollPane2, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 5);
    add(sysDbPanel, gridBagConstraints);

    connectorsContainPanel.setBackground(new java.awt.Color(255, 255, 255));
    connectorsContainPanel.setLayout(new java.awt.GridBagLayout());

    jScrollPane3.setBorder(null);
    jScrollPane3.setViewportView(htmlLabelPanel3);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 0.01;
    gridBagConstraints.weighty = 1.0;
    connectorsContainPanel.add(jScrollPane3, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 5);
    add(connectorsContainPanel, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel connectorsContainPanel;
  private javax.swing.JPanel generalPanel;
  private ch.ivyteam.ivy.visualvm.view.HtmlLabelPanel htmlLabelPanel1;
  private ch.ivyteam.ivy.visualvm.view.HtmlLabelPanel htmlLabelPanel2;
  private ch.ivyteam.ivy.visualvm.view.HtmlLabelPanel htmlLabelPanel3;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JPanel sysDbPanel;
  // End of variables declaration//GEN-END:variables

  void writeProperties(java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TO DO store your settings
  }

  /*
   * CHECKSTYLE:ON
   */
  public void readInformation(DataBeanProvider dataBeanProvider) {
    MBeanServerConnection connection = dataBeanProvider.getMBeanServerConnection();
    BasicIvyJmxDataCollector collector = new BasicIvyJmxDataCollector();

    try {
      IvyApplicationInfo basicInfo = dataBeanProvider.getGenericData().getApplicationInfo();
      OSInfo osInfo = collector.getOSInfo(connection);
      String hostInfo = collector.getHostInfo(connection);
      htmlLabelPanel1.setText(toGeneralHtmlString(basicInfo, osInfo, hostInfo));

      SystemDatabaseInfo sysDbInfo = collector.getSystemDatabaseInfo(connection);
      htmlLabelPanel2.setText(toSystemDBInfoHtmlString(sysDbInfo));

      List<ServerConnectorInfo> connectorInfo = dataBeanProvider.getGenericData().getServerConnectors();
      htmlLabelPanel3.setText(toConnectorsHtmlString(connectorInfo));

    } catch (IvyJmxDataCollectException ex) {
      LOGGER.warning(ex.getMessage());
    }
  }

  private String toGeneralHtmlString(IvyApplicationInfo basicInfo,
          OSInfo osInfo, String hostInfo) {
    StringBuilder html = beginHTML();
    if (basicInfo != null) {
      appendValue(html, ContentProvider.get("IvyVersion"), basicInfo.getVersion());
      appendValue(html, ContentProvider.get("BuildDate"), DataUtils.dateToString(basicInfo.getBuildDate()));
      appendValue(html, ContentProvider.get("InstallationDirectory"), basicInfo.getInstallationDirectory());
    }
    if (osInfo != null) {
      appendValue(html, ContentProvider.get("OperatingSystem"), osInfo.getName());
    }
    appendValue(html, ContentProvider.get("IvyHostName"), hostInfo);
    endHTML(html);
    return html.toString();
  }

  private String toSystemDBInfoHtmlString(SystemDatabaseInfo sysDbInfo) {
    StringBuilder html = beginHTML();
    if (sysDbInfo != null) {
      appendValue(html, ContentProvider.get("IvyDatabaseVersion"), sysDbInfo.getIvySystemDbVersion());
      appendValue(html, ContentProvider.get("DatabaseProduct"), sysDbInfo.getType());
      appendValue(html, ContentProvider.get("DatabaseVersion"), sysDbInfo.getVersion());
      appendValue(html, ContentProvider.get("DatabaseDriver"), sysDbInfo.getDriver());

      String hostName = DataUtils.getHostFromConnectionUrl(sysDbInfo.getConnectionUrl());
      if (!StringUtils.isEmpty(hostName)) {
        appendValue(html, ContentProvider.get("DatabaseHost"), hostName);
      }

      String port = DataUtils.getPortFromConnectionUrl(sysDbInfo.getConnectionUrl());
      if (!StringUtils.isEmpty(port)) {
        appendValue(html, ContentProvider.get("DatabasePort"), port);
      }

      String dbName = DataUtils.getSchemaFromConnectionUrl(sysDbInfo.getConnectionUrl());
      if (!StringUtils.isEmpty(dbName)) {
        appendValue(html, ContentProvider.get("DatabaseName"), dbName);
      }

      String username = sysDbInfo.getUsername();
      if (!StringUtils.isEmpty(StringUtils.trim(username))) {
        appendValue(html, ContentProvider.get("DatabaseUserName"), username);
      }

      appendValue(html, ContentProvider.get("ConnectionURL"), sysDbInfo.getConnectionUrl());
    }
    endHTML(html);
    return html.toString();
  }

  private String toConnectorsHtmlString(List<ServerConnectorInfo> connectorInfo) {
    StringBuilder html = beginHTML();
    if (connectorInfo.size() > 0) {
      for (ServerConnectorInfo connector : connectorInfo) {
        html.append(TR_TD_START_WITH_NO_WRAP)
                .append(connector.getDisplayProtocol())
                .append(" - ")
                .append(connector.getPort())
                .append(TD_TR_END);
      }
    } else {
      html.append(TR_TD_START_WITH_NO_WRAP)
              .append(ContentProvider.get("NoConnector"))
              .append(TD_TR_END);
    }
    endHTML(html);
    return html.toString();
  }

  private StringBuilder beginHTML() {
    StringBuilder html = new StringBuilder("<html><body style=\"font-family:tahoma;font-size:11\">");
    html.append(TABLE_START);
    return html;
  }

  private void endHTML(StringBuilder html) {
    html.append(TABLE_END);
    html.append("</body></html>");
  }

  private void appendValue(StringBuilder html, String label, String value) {
    html.append(TR_TD_START_WITH_NO_WRAP)
            .append(label)
            .append(CHAR_COLON)
            .append(CHAR_SPACE)
            .append(TD_END)
            .append(TD_START)
            .append(value)
            .append(TD_TR_END);
  }

  public JComponent getConnectorsPanel() {
    return connectorsContainPanel;
  }

  public JComponent getGeneralPanel() {
    return generalPanel;
  }

  public JComponent getSysDbPanel() {
    return sysDbPanel;
  }

}
