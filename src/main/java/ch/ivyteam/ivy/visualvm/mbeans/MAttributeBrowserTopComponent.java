/*
 * To change this template, choose Tools | Templates and open the template in the editor.
 */
package ch.ivyteam.ivy.visualvm.mbeans;

import java.util.List;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//ch.ivyteam.ivy.visualvm//MAttributesDialog//EN", autostore = false)
@TopComponent.Description(preferredID = "MAttributesDialogTopComponent",
        // iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "bottomSlidingSide", openAtStartup = false)
@ActionID(category = "Window", id = "ch.ivyteam.ivy.visualvm.MAttributesDialogTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_MAttributesDialogAction", preferredID
        = "MAttributesDialogTopComponent")
@Messages({"CTL_MAttributesDialogAction=MAttributesDialog",
  "CTL_MAttributesDialogTopComponent=MAttributesDialog Window",
  "HINT_MAttributesDialogTopComponent=This is a MAttributesDialog window"})
public final class MAttributeBrowserTopComponent extends TopComponent {

  public MAttributeBrowserTopComponent() {
    initComponents();
    setName(Bundle.CTL_MAttributesDialogTopComponent());
    setToolTipText(Bundle.HINT_MAttributesDialogTopComponent());

  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
   * code. The content of this method is always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed"
  // desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    jScrollPane2 = new javax.swing.JScrollPane();
    jScrollPane1 = new javax.swing.JScrollPane();
    attributeList = new javax.swing.JList();
    jCheckBox1 = new javax.swing.JCheckBox();

    org.openide.awt.Mnemonics.setLocalizedText(jLabel1,
            org.openide.util.NbBundle.getMessage(
                    MAttributeBrowserTopComponent.class,
                    "MAttributeBrowserTopComponent.jLabel1.text")); // NOI18N

    attributeList.setModel(new javax.swing.AbstractListModel() {
      String[] strings = {"Item 1", "Item 2", "Item 3", "Item 4",
          "Item 5"};

      public int getSize() {
        return strings.length;
      }

      public Object getElementAt(int i) {
        return strings[i];
      }
    });
    attributeList.setVisibleRowCount(20);
    jScrollPane1.setViewportView(attributeList);

    jScrollPane2.setViewportView(jScrollPane1);

    org.openide.awt.Mnemonics.setLocalizedText(jCheckBox1,
            org.openide.util.NbBundle.getMessage(
                    MAttributeBrowserTopComponent.class,
                    "MAttributeBrowserTopComponent.jCheckBox1.text")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(layout
            .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(
                    layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(
                                    layout.createParallelGroup(
                                            javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane2)
                                            .addGroup(
                                                    layout.createSequentialGroup()
                                                            .addComponent(
                                                                    jLabel1)
                                                            .addGap(0,
                                                                    282,
                                                                    Short.MAX_VALUE)))
                            .addContainerGap()));
    layout.setVerticalGroup(layout
            .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(
                    layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel1)
                            .addPreferredGap(
                                    javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane2,
                                    javax.swing.GroupLayout.DEFAULT_SIZE,
                                    258, Short.MAX_VALUE).addContainerGap()));
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JList attributeList;
  private javax.swing.JCheckBox jCheckBox1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;

  // End of variables declaration//GEN-END:variables
  @Override
  public void componentOpened() {
    // TODO add custom code on component opening
  }

  @Override
  public void componentClosed() {
    // TODO add custom code on component closing
  }

  void writeProperties(java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  void readProperties(java.util.Properties p) {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }

  void setSelectedAttributes(String[] attributes) {
    MAttributeListModel model = (MAttributeListModel) attributeList
            .getModel();
    attributeList.setSelectedIndices(model.getIndexes(attributes));
  }

  String[] getSelectedAttributes() {
    List selectedAttributes = attributeList.getSelectedValuesList();
    String[] attributes = new String[selectedAttributes.size()];
    for (int pos = 0; pos < attributes.length; pos++) {
      attributes[pos] = selectedAttributes.get(pos).toString();
    }
    return attributes;
  }

  void setAttributeListModel(MAttributeListModel mAttributeListModel) {
    attributeList.setModel(mAttributeListModel);
  }

}
