/*
 * To change this template, choose Tools | Templates and open the template in the editor.
 */
package ch.ivyteam.ivy.visualvm.mbeans;

import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//ch.ivyteam.ivy.visualvm//MBeanBrowser//EN", autostore = false)
@TopComponent.Description(preferredID = "MBeanBrowserTopComponent",
        // iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "bottomSlidingSide", openAtStartup = false)
@ActionID(category = "Window", id = "ch.ivyteam.ivy.visualvm.MBeanBrowserTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_MBeanBrowserAction", preferredID
        = "MBeanBrowserTopComponent")
@Messages({"CTL_MBeanBrowserAction=MBeanBrowser",
  "CTL_MBeanBrowserTopComponent=MBeanBrowser Window",
  "HINT_MBeanBrowserTopComponent=This is a MBeanBrowser window"})
public final class MBeanBrowserTopComponent extends TopComponent {

  public MBeanBrowserTopComponent() {
    initComponents();
    setName(Bundle.CTL_MBeanBrowserTopComponent());
    setToolTipText(Bundle.HINT_MBeanBrowserTopComponent());

  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
   * code. The content of this method is always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed"
  // desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    label = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    mBeanTree = new javax.swing.JTree();

    org.openide.awt.Mnemonics.setLocalizedText(label,
            org.openide.util.NbBundle.getMessage(
                    MBeanBrowserTopComponent.class,
                    "MBeanBrowserTopComponent.label.text")); // NOI18N

    mBeanTree.setCellRenderer(new MBeanTreeCellRenderer());
    mBeanTree.setRootVisible(false);
    mBeanTree.setShowsRootHandles(true);
    jScrollPane1.setViewportView(mBeanTree);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(layout
            .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(
                    layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(
                                    layout.createParallelGroup(
                                            javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(
                                                    jScrollPane1,
                                                    javax.swing.GroupLayout.DEFAULT_SIZE,
                                                    380, Short.MAX_VALUE)
                                            .addGroup(
                                                    layout.createSequentialGroup()
                                                            .addComponent(
                                                                    label)
                                                            .addGap(0,
                                                                    0,
                                                                    Short.MAX_VALUE)))
                            .addContainerGap()));
    layout.setVerticalGroup(layout
            .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(
                    layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(label)
                            .addPreferredGap(
                                    javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane1,
                                    javax.swing.GroupLayout.DEFAULT_SIZE,
                                    258, Short.MAX_VALUE).addContainerGap()));
  }// </editor-fold>//GEN-END:initComponents
   // Variables declaration - do not modify//GEN-BEGIN:variables

  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JLabel label;
  private javax.swing.JTree mBeanTree;

  // End of variables declaration//GEN-END:variables
  @Override
  public void componentOpened() {
    // TODO add custom code on component opening
  }

  @Override
  public void componentClosed() {
    // TODO add custom code on component closing
  }

  void writeProperties(java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  void readProperties(java.util.Properties p) {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }

  void setMBeanTreeModel(TreeModel mBeanTreeModel) {
    this.mBeanTree.setModel(mBeanTreeModel);
  }

  public String getSelectedMBean() {
    TreePath selectionPath = mBeanTree.getSelectionPath();
    if (selectionPath != null) {
      MBeanNode selectedNode = (MBeanNode) selectionPath
              .getLastPathComponent();
      return selectedNode.getMBeanName();
    }
    return null;
  }

  void setSelected(String mBean, String attribute) {
    TreePath selectedPath = ((MBeanTreeModel) mBeanTree.getModel())
            .getTreePathFor(mBean, attribute);
    if (selectedPath != null) {
      mBeanTree.setSelectionPath(selectedPath);
    }
  }

  String getSelectedAttribute() {
    TreePath selectionPath = mBeanTree.getSelectionPath();
    if (selectionPath != null) {
      MBeanNode selectedNode = (MBeanNode) selectionPath
              .getLastPathComponent();
      if (selectedNode.isAttribute()) {
        return selectedNode.getAttribute();
      }
    }
    return null;
  }

}
