package ch.ivyteam.ivy.visualvm.view;

import ch.ivyteam.ivy.visualvm.model.SQLInfo;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.RowSorter.SortKey;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableCellRenderer;
import org.jdesktop.beansbinding.Binding;

public class ExternalDbSlowQueriesPanel extends javax.swing.JPanel {

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
   * code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;
    bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

    fSQLInfoList = new java.util.ArrayList<SQLInfo>();
    emptyLabel = new javax.swing.JLabel();
    btnRefresh = new javax.swing.JButton();
    jSplitPane1 = new javax.swing.JSplitPane();
    jScrollPane1 = new javax.swing.JScrollPane();
    tableSlowQueries = new javax.swing.JTable();
    jScrollPane2 = new javax.swing.JScrollPane();
    txtSQL = new javax.swing.JTextArea();

    setBackground(new java.awt.Color(255, 255, 255));
    setLayout(new java.awt.GridBagLayout());

    org.openide.awt.Mnemonics.setLocalizedText(emptyLabel, org.openide.util.NbBundle.getMessage(ExternalDbSlowQueriesPanel.class, "ExternalDbSlowQueriesPanel.emptyLabel.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    add(emptyLabel, gridBagConstraints);

    org.openide.awt.Mnemonics.setLocalizedText(btnRefresh, org.openide.util.NbBundle.getMessage(ExternalDbSlowQueriesPanel.class, "ExternalDbSlowQueriesPanel.btnRefresh.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    add(btnRefresh, gridBagConstraints);

    jSplitPane1.setBorder(null);
    jSplitPane1.setDividerLocation(120);
    jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

    tableSlowQueries.setAutoCreateRowSorter(true);
    tableSlowQueries.getTableHeader().setReorderingAllowed(false);

    org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, fSQLInfoList, tableSlowQueries, "bindingSlowQueriesTable");
    org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${time}"));
    columnBinding.setColumnName("Time");
    columnBinding.setColumnClass(java.util.Date.class);
    columnBinding.setEditable(false);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${dbConfig}"));
    columnBinding.setColumnName("DB Config");
    columnBinding.setColumnClass(String.class);
    columnBinding.setEditable(false);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${processElementId}"));
    columnBinding.setColumnName("Process Element ID");
    columnBinding.setColumnClass(String.class);
    columnBinding.setEditable(false);
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${executionTime}"));
    columnBinding.setColumnName("Execution Time [ms]");
    columnBinding.setColumnClass(Long.class);
    columnBinding.setEditable(false);
    bindingGroup.addBinding(jTableBinding);
    jTableBinding.bind();
    jScrollPane1.setViewportView(tableSlowQueries);
    if (tableSlowQueries.getColumnModel().getColumnCount() > 0) {
      tableSlowQueries.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ExternalDbSlowQueriesPanel.class, "ExternalDbSlowQueriesPanel.tableSlowQueries.columnModel.title0_1")); // NOI18N
      tableSlowQueries.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ExternalDbSlowQueriesPanel.class, "ExternalDbSlowQueriesPanel.tableSlowQueries.columnModel.title1_1")); // NOI18N
      tableSlowQueries.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(ExternalDbSlowQueriesPanel.class, "ExternalDbSlowQueriesPanel.tableSlowQueries.columnModel.title2_1")); // NOI18N
      tableSlowQueries.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(ExternalDbSlowQueriesPanel.class, "ExternalDbSlowQueriesPanel.tableSlowQueries.columnModel.title3_1")); // NOI18N
    }

    jSplitPane1.setTopComponent(jScrollPane1);

    jScrollPane2.setBorder(null);

    txtSQL.setEditable(false);
    txtSQL.setColumns(20);
    txtSQL.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    txtSQL.setRows(5);

    org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, tableSlowQueries, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.statement}"), txtSQL, org.jdesktop.beansbinding.BeanProperty.create("text"), "bindingSQL");
    bindingGroup.addBinding(binding);

    jScrollPane2.setViewportView(txtSQL);

    jSplitPane1.setRightComponent(jScrollPane2);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    add(jSplitPane1, gridBagConstraints);

    bindingGroup.bind();
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnRefresh;
  private javax.swing.JLabel emptyLabel;
  private java.util.ArrayList<SQLInfo> fSQLInfoList;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JSplitPane jSplitPane1;
  private javax.swing.JTable tableSlowQueries;
  private javax.swing.JTextArea txtSQL;
  private org.jdesktop.beansbinding.BindingGroup bindingGroup;
  // End of variables declaration//GEN-END:variables

  private final ExternalDbView fExternalDbView;
  private boolean fIsLoaded = false;
  private final DateTableCellRenderer fDateCellRenderer = new DateTableCellRenderer();
  private final NumberTableCellRenderer fNumberCellRenderer = new NumberTableCellRenderer();

  public ExternalDbSlowQueriesPanel(ExternalDbView externalDbView) {
    initComponents();
    fExternalDbView = externalDbView;
    btnRefresh.addActionListener(new RefreshButtonActionListener());
    tableSlowQueries.addMouseListener(new SlowQueriesTableMouseListener());
  }

  public void refresh(List<SQLInfo> sqlInfoList) {
    fIsLoaded = true;
    List<? extends SortKey> sortKeys = tableSlowQueries.getRowSorter().getSortKeys();
    refreshSlowQueriesTable(sqlInfoList);
    if (sortKeys.isEmpty()) {
      tableSlowQueries.getRowSorter().setSortKeys(createDefaultSortKey());
    } else {
      tableSlowQueries.getRowSorter().setSortKeys(sortKeys);
    }
    txtSQL.setText("");
  }

  private void refreshSlowQueriesTable(List<SQLInfo> sqlInfoList) {
    Binding binding = bindingGroup.getBinding("bindingSlowQueriesTable");
    binding.unbind();
    fSQLInfoList.clear();
    fSQLInfoList.addAll(sqlInfoList);
    binding.bind();
    tableSlowQueries.getColumnModel().getColumn(0).setCellRenderer(fDateCellRenderer);
    tableSlowQueries.getColumnModel().getColumn(3).setCellRenderer(fNumberCellRenderer);
    tableSlowQueries.repaint();
  }

  public boolean isLoaded() {
    return fIsLoaded;
  }

  private List<SortKey> createDefaultSortKey() {
    List<SortKey> sortKeys = new ArrayList();
    SortKey sortKey = new SortKey(3, SortOrder.DESCENDING);
    sortKeys.add(sortKey);
    return sortKeys;
  }

  private class RefreshButtonActionListener implements ActionListener {
    @Override
    public void actionPerformed(ActionEvent e) {
      fExternalDbView.refreshSlowQueriesTab();
    }

  }

  private class SlowQueriesTableMouseListener extends MouseAdapter {
    @Override
    public void mouseClicked(MouseEvent e) {
      if (e.getClickCount() == 2) {
        int selectedRow = tableSlowQueries.getSelectedRow();
        SQLInfo info = fSQLInfoList.get(tableSlowQueries.convertRowIndexToModel(selectedRow));
        fExternalDbView.showChart(info.getApplication(), info.getEnvironment(), info.getConfigName());
      }
    }

  }

  class NumberTableCellRenderer extends DefaultTableCellRenderer {

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
            boolean hasFocus, int row, int column) {
      String dateValue = value.toString();
      if (value instanceof Long) {
        dateValue = NumberFormat.getNumberInstance().format(value);
      }
      setHorizontalAlignment(JLabel.RIGHT);
      return super.getTableCellRendererComponent(table, dateValue, isSelected, hasFocus, row, column);
    }

  }

}
