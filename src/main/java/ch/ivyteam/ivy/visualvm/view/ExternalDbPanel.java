/*
 * To change this license header, choose License Headers in Project Properties. To change this template file,
 * choose Tools | Templates and open the template in the editor.
 */
package ch.ivyteam.ivy.visualvm.view;

import ch.ivyteam.ivy.visualvm.chart.ChartsPanel;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.JList;
import javax.swing.JTree;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeWillExpandListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.ExpandVetoException;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import org.openide.util.ImageUtilities;

/**
 *
 * @author htnam
 */
@SuppressWarnings({"serial", "PMD.SingularField"})
public class ExternalDbPanel extends javax.swing.JPanel {

  private static final String APP_ICON_PATH = "resources/icons/app_icon.png";
  private static final String ENV_ICON_PATH = "resources/icons/env_icon.png";
  private static final String CONF_ICON_PATH = "resources/icons/db_icon.png";
  private final Color disableColor = new Color(173, 173, 173);

  private final DefaultListModel<String> fConfigListModel;
  private final DefaultTreeModel fEnvTreeModel;
  private final Icon fAppIcon;
  private final Icon fEnvIcon;
  private final Icon fConfIcon;
  private final DefaultMutableTreeNode fRootNode;
  private TreePath[] fSelectedPath;
  private boolean fResized = false;
  private int fMainSplitSize, fLeftSplitSize;
  private Map<String, Map<String, Set<String>>> fAppEnvConfigMap;
  private final Set<AppEnvNode> fEnvironmentNodes;
  private Set<String> fAvailableConfigs;
  private final Set<String> fAvailableEnvironments;
  private final ExternalDbView fExternalDbView;

  /**
   * Creates new form ExternalDbPanel
   */
  public ExternalDbPanel(ExternalDbView externalDbView) {
    fExternalDbView = externalDbView;
    fAppIcon = (Icon) ImageUtilities.loadImage(APP_ICON_PATH, true);
    fEnvIcon = (Icon) ImageUtilities.loadImage(ENV_ICON_PATH, true);
    fConfIcon = (Icon) ImageUtilities.loadImage(CONF_ICON_PATH, true);
    // need to init data models before initialization of the tree and the list
    fRootNode = new AppEnvNode("", true);
    fEnvTreeModel = new DefaultTreeModel(fRootNode);
    fConfigListModel = new DefaultListModel<>();
    fEnvironmentNodes = new HashSet<>();
    fAvailableConfigs = new HashSet<>();
    fAvailableEnvironments = new HashSet<>();

    initComponents();
    initTree();
    initList();
    initSelectionListeners();
    addResizeSplitpanesListener();
  }

  // CHECKSTYLE:OFF
  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
   * code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings({"PMD", "rawtypes", "unchecked"})
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    mainSplitpane = new javax.swing.JSplitPane();
    leftSplitpane = new javax.swing.JSplitPane();
    jPanel1 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    envJTree = new javax.swing.JTree();
    jPanel2 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jSeparator1 = new javax.swing.JSeparator();
    jPanel3 = new javax.swing.JPanel();
    jPanel4 = new javax.swing.JPanel();
    jLabel2 = new javax.swing.JLabel();
    jSeparator2 = new javax.swing.JSeparator();
    jScrollPane2 = new javax.swing.JScrollPane();
    dbConfJList = new javax.swing.JList();
    jPanel5 = new javax.swing.JPanel();

    setLayout(new java.awt.GridBagLayout());

    mainSplitpane.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
    mainSplitpane.setDividerLocation(120);

    leftSplitpane.setBorder(null);
    leftSplitpane.setDividerLocation(200);
    leftSplitpane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
    leftSplitpane.setResizeWeight(0.5);

    jPanel1.setBackground(new java.awt.Color(255, 255, 255));
    jPanel1.setLayout(new java.awt.GridBagLayout());

    jScrollPane1.setBorder(null);

    envJTree.setModel(fEnvTreeModel);
    envJTree.setRootVisible(false);
    jScrollPane1.setViewportView(envJTree);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    jPanel1.add(jScrollPane1, gridBagConstraints);

    jPanel2.setLayout(new java.awt.GridBagLayout());

    org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ExternalDbPanel.class, "ExternalDbPanel.jLabel1.text")); // NOI18N
    jLabel1.setToolTipText(org.openide.util.NbBundle.getMessage(ExternalDbPanel.class, "ExternalDbPanel.jLabel1.toolTipText")); // NOI18N
    jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
    jPanel2.add(jLabel1, gridBagConstraints);

    jSeparator1.setForeground(new java.awt.Color(120, 120, 120));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel2.add(jSeparator1, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel1.add(jPanel2, gridBagConstraints);

    leftSplitpane.setLeftComponent(jPanel1);

    jPanel3.setBackground(new java.awt.Color(255, 255, 255));
    jPanel3.setLayout(new java.awt.GridBagLayout());

    jPanel4.setLayout(new java.awt.GridBagLayout());

    org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ExternalDbPanel.class, "ExternalDbPanel.jLabel2.text")); // NOI18N
    jLabel2.setToolTipText(org.openide.util.NbBundle.getMessage(ExternalDbPanel.class, "ExternalDbPanel.jLabel2.toolTipText")); // NOI18N
    jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
    jPanel4.add(jLabel2, gridBagConstraints);

    jSeparator2.setForeground(new java.awt.Color(120, 120, 120));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel4.add(jSeparator2, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel3.add(jPanel4, gridBagConstraints);

    jScrollPane2.setBorder(null);

    dbConfJList.setModel(fConfigListModel);
    dbConfJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
    jScrollPane2.setViewportView(dbConfJList);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    jPanel3.add(jScrollPane2, gridBagConstraints);

    leftSplitpane.setRightComponent(jPanel3);

    mainSplitpane.setLeftComponent(leftSplitpane);

    jPanel5.setBackground(new java.awt.Color(255, 255, 255));

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
      jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 274, Short.MAX_VALUE)
    );
    jPanel5Layout.setVerticalGroup(
      jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 298, Short.MAX_VALUE)
    );

    mainSplitpane.setRightComponent(jPanel5);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    add(mainSplitpane, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JList dbConfJList;
  private javax.swing.JTree envJTree;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanel4;
  private javax.swing.JPanel jPanel5;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JSeparator jSeparator1;
  private javax.swing.JSeparator jSeparator2;
  private javax.swing.JSplitPane leftSplitpane;
  private javax.swing.JSplitPane mainSplitpane;
  // End of variables declaration//GEN-END:variables
  // CHECKSTYLE:ON

  void setChartPanelToVisible(ChartsPanel externalDbChartPanel) {
    fMainSplitSize = mainSplitpane.getDividerLocation();
    fLeftSplitSize = leftSplitpane.getDividerLocation();
    mainSplitpane.setRightComponent(externalDbChartPanel.getUIComponent());
    resizeSplitpanes(fMainSplitSize, fLeftSplitSize);
  }

  void setTreeListData(Map<String, Map<String, Set<String>>> appEnvConfMap) {
    fAppEnvConfigMap = appEnvConfMap;
    initTreeData();
    initListData();
    expandAllTreeNodes();
  }

  private void initTree() {
    envJTree.setCellRenderer(new EnvTreeCellRenderer());
    envJTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
    envJTree.setToggleClickCount(1);

    preventSelection();
    keepSelectionWhenCollapse();
  }

  private void preventSelection() {
    envJTree.addTreeSelectionListener(new TreeSelectionListener() {
      @Override
      public void valueChanged(TreeSelectionEvent e) {
        TreePath oldPath = e.getOldLeadSelectionPath();
        TreePath newPath = e.getNewLeadSelectionPath();
        if (newPath != null) {
          AppEnvNode node = (AppEnvNode) newPath.getLastPathComponent();
          if (node.isAppNode()) {
            envJTree.setSelectionPath(oldPath);
          } else {
            envJTree.setSelectionPath(newPath);
          }
        }
      }
    });
  }

  private void keepSelectionWhenCollapse() {
    envJTree.addTreeWillExpandListener(new TreeWillExpandListener() {
      @Override
      public void treeWillExpand(TreeExpansionEvent event) throws ExpandVetoException {
        envJTree.setSelectionPaths(fSelectedPath);
      }

      @Override
      public void treeWillCollapse(TreeExpansionEvent event) throws ExpandVetoException {
        fSelectedPath = envJTree.getSelectionPaths();
      }

    });
  }

  private void expandAllTreeNodes() {
    for (int i = 0; i < envJTree.getRowCount(); ++i) {
      envJTree.expandRow(i);
    }
  }

  private void addResizeSplitpanesListener() {
    addComponentListener(new ComponentAdapter() {
      @Override
      public void componentResized(ComponentEvent e) {
        if (!fResized) {
          resizeSplitpanes((int) (getSize().getWidth() / 7), (int) getSize().getHeight() / 2);
          fResized = true;
        }
      }
    });
  }

  private void resizeSplitpanes(int main, int left) {
    mainSplitpane.setDividerLocation(main);
    leftSplitpane.setDividerLocation(left);
  }

  private void initList() {
    dbConfJList.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    dbConfJList.setCellRenderer(new ConfigListCellRenderer());
  }

  private void initTreeData() {
    // reset the tree
    fEnvironmentNodes.clear();
    for (int i = 0; i < fRootNode.getChildCount(); i++) {
      fEnvTreeModel.removeNodeFromParent((MutableTreeNode) fRootNode.getChildAt(i));
    }

    int index = 0;
    for (String appName : fAppEnvConfigMap.keySet()) {
      AppEnvNode appNode = new AppEnvNode(appName, true);
      fEnvTreeModel.insertNodeInto(appNode, fRootNode, index++);
      int envIndex = 0;
      for (String env : fAppEnvConfigMap.get(appName).keySet()) {
        AppEnvNode envNode = new AppEnvNode(env, false);
        fEnvTreeModel.insertNodeInto(envNode, appNode, envIndex++);
        fEnvironmentNodes.add(envNode);
      }
    }
    fEnvTreeModel.reload();
  }

  private void initListData() {
    // reset the list
    fConfigListModel.clear();

    Set<String> configs = new TreeSet<>();
    for (String app : fAppEnvConfigMap.keySet()) {
      for (String env : fAppEnvConfigMap.get(app).keySet()) {
        configs.addAll(fAppEnvConfigMap.get(app).get(env));
      }
    }
    dbConfJList.setListData(configs.toArray());
  }

  /**
   * If user is selecting tree node: disable & enable elements in the list depends on selected node, if the
   * current selection in the list is valid, still keep it, otherwise clear selection.<br/>
   * If user is selecting list element: disable & enable nodes in the tree depends on selected item, if the
   * current selection in the tree is valid, still keep it, otherwise clear selection.
   */
  private void initSelectionListeners() {
    envJTree.addTreeSelectionListener(new TreeSelectionListener() {
      @Override
      public void valueChanged(TreeSelectionEvent treeSelEvent) {
        if (envJTree.getSelectionPath() == null) {
          return;
        }
        AppEnvNode node = (AppEnvNode) treeSelEvent.getPath().getLastPathComponent();
        if (node != null && !node.isAppNode()) {
          changeListItemStatus(node.getParent().toString(), node.toString());
          createChartWhenSelectionCorrects();
        }
      }
    });

    dbConfJList.addListSelectionListener(new ListSelectionListener() {
      @Override
      public void valueChanged(ListSelectionEvent e) {
        Object selectedConfig = dbConfJList.getSelectedValue();
        if (selectedConfig == null) {
          return;
        }
        fAvailableEnvironments.clear();
        for (String app : fAppEnvConfigMap.keySet()) {
          for (String env : fAppEnvConfigMap.get(app).keySet()) {
            if (fAppEnvConfigMap.get(app).get(env).contains(selectedConfig.toString())) {
              fAvailableEnvironments.add(env);
            }
          }
        }
        changeTreeNodeStatus();
        createChartWhenSelectionCorrects();
      }
    });

  }

  private void createChartWhenSelectionCorrects() {
    if (envJTree.getSelectionPath() == null || dbConfJList.getSelectedValue() == null) {
      return;
    }
    AppEnvNode node = (AppEnvNode) envJTree.getSelectionPath().getLastPathComponent();
    if (node != null) {
      fExternalDbView.fireCreateChartsAction(node.getParent().toString(), node.toString(),
              dbConfJList.getSelectedValue().toString());
    }
  }

  private void changeListItemStatus(String application, String environment) {
    Map<String, Set<String>> envConfMap = fAppEnvConfigMap.get(application);
    fAvailableConfigs = envConfMap.get(environment);
    Object selected = dbConfJList.getSelectedValue();
    if (selected != null && !fAvailableConfigs.contains(selected.toString())) {
      dbConfJList.clearSelection();
    }
    dbConfJList.repaint();
  }

  private void changeTreeNodeStatus() {
    if (envJTree.getSelectionPath() != null) {
      AppEnvNode node = (AppEnvNode) envJTree.getSelectionPath().getLastPathComponent();
      if (node != null && !fAvailableEnvironments.contains(node.toString())) {
        envJTree.clearSelection();
      }
    }
    for (AppEnvNode envNode : fEnvironmentNodes) {
      if (fAvailableEnvironments.contains(envNode.toString())) {
        envNode.setEnable(true);
      } else {
        envNode.setEnable(false);
      }
    }
    envJTree.repaint();
  }

  private class AppEnvNode extends DefaultMutableTreeNode {

    private boolean enableStatus; // to disable or enable the node by changing its color
    private final boolean isAppNode; // to distingues application node and environment node

    public AppEnvNode(Object userObject, boolean appNode) {
      super(userObject);
      enableStatus = true;
      isAppNode = appNode;
      setAllowsChildren(true);
    }

    public void setEnable(boolean enable) {
      this.enableStatus = enable;
    }

    public boolean getStatus() {
      return enableStatus;
    }

    public boolean isAppNode() {
      return this.isAppNode;
    }

  }

  private class EnvTreeCellRenderer extends DefaultTreeCellRenderer {

    @Override
    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded,
            boolean leaf, int row, boolean hasFocus) {
      super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus);

      if (value instanceof AppEnvNode) {
        AppEnvNode node = (AppEnvNode) value;
        // set icon for normal case
        if (node.isAppNode()) {
          setIcon(fAppIcon);
        } else {
          setIcon(fEnvIcon);
        }
        if (node.getStatus()) {
          setForeground(Color.black);
        } else {
          setForeground(disableColor);
        }
        setText((String) node.getUserObject());
      }
      return this;
    }
  }

  private class ConfigListCellRenderer extends DefaultListCellRenderer {

    @Override
    public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected,
            boolean cellHasFocus) {
      super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
      setIcon(fConfIcon);
      if (fAvailableConfigs.contains(value.toString())) {
        setForeground(Color.black);
      } else {
        setForeground(disableColor);
      }
      return this;
    }
  }
}
