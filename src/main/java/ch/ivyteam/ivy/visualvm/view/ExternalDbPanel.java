/*
 * To change this license header, choose License Headers in Project Properties. To change this template file,
 * choose Tools | Templates and open the template in the editor.
 */
package ch.ivyteam.ivy.visualvm.view;

import ch.ivyteam.ivy.visualvm.chart.ChartsPanel;
import ch.ivyteam.ivy.visualvm.util.DataUtils;
import com.sun.tools.visualvm.application.Application;
import java.awt.Component;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import javax.management.MBeanServerConnection;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.JList;
import javax.swing.JTree;
import javax.swing.ListSelectionModel;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeWillExpandListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.ExpandVetoException;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import org.openide.util.ImageUtilities;

/**
 * 
 * @author htnam
 */
@SuppressWarnings("serial")
public class ExternalDbPanel extends javax.swing.JPanel {

  private static final String APP_ICON_PATH = "resources/icons/app_icon.png";
  private static final String ENV_ICON_PATH = "resources/icons/env_icon.png";
  private static final String CONF_ICON_PATH = "resources/icons/db_icon.png";

  private final DefaultListModel<String> configListModel;
  private final DefaultTreeModel envTreeModel;
  private final Icon appIcon;
  private final Icon envIcon;
  private final Icon confIcon;
  private TreePath[] selectedPath;
  private final DefaultMutableTreeNode rootNode;
  private final Application fIvyApplication;

  /**
   * Creates new form ExternalDbPanel
   */
  public ExternalDbPanel(Application alication) {
    fIvyApplication = alication;
    appIcon = (Icon) ImageUtilities.loadImage(APP_ICON_PATH, true);
    envIcon = (Icon) ImageUtilities.loadImage(ENV_ICON_PATH, true);
    confIcon = (Icon) ImageUtilities.loadImage(CONF_ICON_PATH, true);
    // need to init data models before init the tree and the list
    rootNode = new EnvironmentNode("", true);
    envTreeModel = new DefaultTreeModel(rootNode);
    configListModel = new DefaultListModel();

    initComponents();
    initTree();
    initList();
    initEnvironmentTreeData();
  }

  // CHECKSTYLE:OFF
  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
   * code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings({"PMD", "rawtypes", "unchecked"})
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    mainSplitpane = new javax.swing.JSplitPane();
    leftSplitpane = new javax.swing.JSplitPane();
    jPanel1 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    env_jtree = new javax.swing.JTree();
    jPanel2 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jSeparator1 = new javax.swing.JSeparator();
    jPanel3 = new javax.swing.JPanel();
    jPanel4 = new javax.swing.JPanel();
    jLabel2 = new javax.swing.JLabel();
    jSeparator2 = new javax.swing.JSeparator();
    jScrollPane2 = new javax.swing.JScrollPane();
    dbconfJList = new javax.swing.JList();
    jPanel5 = new javax.swing.JPanel();

    setLayout(new java.awt.GridBagLayout());

    mainSplitpane.setDividerLocation(120);

    leftSplitpane.setDividerLocation(200);
    leftSplitpane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
    leftSplitpane.setResizeWeight(0.5);

    jPanel1.setBackground(new java.awt.Color(255, 255, 255));
    jPanel1.setLayout(new java.awt.GridBagLayout());

    jScrollPane1.setBorder(null);

    env_jtree.setModel(envTreeModel);
    env_jtree.setRootVisible(false);
    jScrollPane1.setViewportView(env_jtree);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
    jPanel1.add(jScrollPane1, gridBagConstraints);

    jPanel2.setBackground(new java.awt.Color(255, 255, 255));
    jPanel2.setLayout(new java.awt.GridBagLayout());

    org.openide.awt.Mnemonics.setLocalizedText(jLabel1,
            org.openide.util.NbBundle.getMessage(ExternalDbPanel.class, "ExternalDbPanel.jLabel1.text")); // NOI18N
    jLabel1.setToolTipText(org.openide.util.NbBundle.getMessage(ExternalDbPanel.class,
            "ExternalDbPanel.jLabel1.toolTipText")); // NOI18N
    jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
    jPanel2.add(jLabel1, gridBagConstraints);

    jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel2.add(jSeparator1, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel1.add(jPanel2, gridBagConstraints);

    leftSplitpane.setLeftComponent(jPanel1);

    jPanel3.setBackground(new java.awt.Color(255, 255, 255));
    jPanel3.setLayout(new java.awt.GridBagLayout());

    jPanel4.setBackground(new java.awt.Color(255, 255, 255));
    jPanel4.setLayout(new java.awt.GridBagLayout());

    org.openide.awt.Mnemonics.setLocalizedText(jLabel2,
            org.openide.util.NbBundle.getMessage(ExternalDbPanel.class, "ExternalDbPanel.jLabel2.text")); // NOI18N
    jLabel2.setToolTipText(org.openide.util.NbBundle.getMessage(ExternalDbPanel.class,
            "ExternalDbPanel.jLabel2.toolTipText")); // NOI18N
    jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
    jPanel4.add(jLabel2, gridBagConstraints);

    jSeparator2.setForeground(new java.awt.Color(0, 0, 0));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel4.add(jSeparator2, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel3.add(jPanel4, gridBagConstraints);

    jScrollPane2.setBorder(null);

    dbconfJList.setModel(configListModel);
    dbconfJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
    jScrollPane2.setViewportView(dbconfJList);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
    jPanel3.add(jScrollPane2, gridBagConstraints);

    leftSplitpane.setRightComponent(jPanel3);

    mainSplitpane.setLeftComponent(leftSplitpane);

    jPanel5.setBackground(new java.awt.Color(255, 255, 255));

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGap(0, 130, Short.MAX_VALUE)
            );
    jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGap(0, 298, Short.MAX_VALUE)
            );

    mainSplitpane.setRightComponent(jPanel5);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    add(mainSplitpane, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JList<String> dbconfJList;
  private javax.swing.JTree env_jtree;
  private javax.swing.JLabel jLabel1;// NOPMD
  private javax.swing.JLabel jLabel2;// NOPMD
  private javax.swing.JPanel jPanel1;// NOPMD
  private javax.swing.JPanel jPanel2;// NOPMD
  private javax.swing.JPanel jPanel3;// NOPMD
  private javax.swing.JPanel jPanel4;// NOPMD
  private javax.swing.JPanel jPanel5;// NOPMD
  private javax.swing.JScrollPane jScrollPane1;// NOPMD
  private javax.swing.JScrollPane jScrollPane2;// NOPMD
  private javax.swing.JSeparator jSeparator1;// NOPMD
  private javax.swing.JSeparator jSeparator2;// NOPMD
  private javax.swing.JSplitPane leftSplitpane;
  private javax.swing.JSplitPane mainSplitpane;

  // End of variables declaration//GEN-END:variables
  // CHECKSTYLE:ON

  private void initTree() {
    env_jtree.setCellRenderer(new EnvCellRenderer());
    env_jtree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
    env_jtree.setToggleClickCount(1);

    preventSelection();
    keepSelectionWhenCollapse();
    addResizeSplitpanesListener();
  }

  private void preventSelection() {
    env_jtree.addTreeSelectionListener(new TreeSelectionListener() {

      @Override
      public void valueChanged(TreeSelectionEvent e) {
        TreePath oldPath = e.getOldLeadSelectionPath();
        TreePath newPath = e.getNewLeadSelectionPath();
        if (newPath != null) {
          EnvironmentNode node = (EnvironmentNode) newPath.getLastPathComponent();
          if (node.isAppNode()) {
            env_jtree.setSelectionPath(oldPath);
          } else {
            env_jtree.setSelectionPath(newPath);
          }
        }
      }
    });
  }

  private void keepSelectionWhenCollapse() {
    env_jtree.addTreeWillExpandListener(new TreeWillExpandListener() {
      @Override
      public void treeWillExpand(TreeExpansionEvent event) throws ExpandVetoException {
        env_jtree.setSelectionPaths(selectedPath);
      }

      @Override
      public void treeWillCollapse(TreeExpansionEvent event) throws ExpandVetoException {
        selectedPath = env_jtree.getSelectionPaths();
      }
    });
  }

  private void expandAllNodes() {
    for (int i = 0; i < env_jtree.getRowCount(); ++i) {
      env_jtree.expandRow(i);
    }
  }

  private void addResizeSplitpanesListener() {
    addComponentListener(new ComponentAdapter() {
      @Override
      public void componentResized(ComponentEvent e) {
        leftSplitpane.setDividerLocation((int) getSize().getHeight() / 2);
        mainSplitpane.setDividerLocation((int) (getSize().getWidth() / 5));
      }
    });
  }

  void addChartPanel(ChartsPanel createExternalDatabaseView) {
    mainSplitpane.setRightComponent(createExternalDatabaseView.getUIComponent());
  }

  private void initList() {
    dbconfJList.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    dbconfJList.setCellRenderer(new DefaultListCellRenderer() {

      @Override
      public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected,
              boolean cellHasFocus) {
        super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        setIcon(confIcon);
        return this;
      }
    });
  }

  private class EnvironmentNode extends DefaultMutableTreeNode {

    private boolean status; // to disable or enable the node by changing its color
    private final boolean isAppNode; // to distingues application node and environment node

    public EnvironmentNode(Object userObject, boolean appNode) {
      super(userObject);
      status = true;
      isAppNode = appNode;
      setAllowsChildren(true);
    }

    public void setEnable(boolean enable) {
      this.status = enable;
    }

    public boolean getStatus() {
      return status;
    }

    public boolean isAppNode() {
      return this.isAppNode;
    }
  }

  private class EnvCellRenderer extends DefaultTreeCellRenderer {

    @Override
    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded,
            boolean leaf, int row, boolean hasFocus) {
      super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus);

      if (value instanceof EnvironmentNode) {
        EnvironmentNode node = (EnvironmentNode) value;
        // set icon for normal case
        if (node.isAppNode()) {
          setIcon(appIcon);
        } else {
          setIcon(envIcon);
        }
        setText((String) node.getUserObject());
      }
      return this;
    }

  }

  private void initEnvironmentTreeData() {
    MBeanServerConnection mbeanConnection = DataUtils.getMBeanConnection(fIvyApplication);
    // List<String> includes string with pattern ApplicationName:EvironmentName:ExtDBConfiguration
    List<String> configsList = DataUtils.getExternalDbConfigs(mbeanConnection);

    Map<String, List<String>> appEnvMap = new HashMap();
    Set<String> configs = new TreeSet();
    for (String each : configsList) {
      String[] splits = each.split(":");
      configs.add(splits[2]); // add all db configs into the list

      if (appEnvMap.containsKey(splits[0])) {
        List<String> env = appEnvMap.get(splits[0]);
        List<String> envList = new ArrayList(env);
        envList.add(splits[1]);
        appEnvMap.put(splits[0], envList);
      } else {
        appEnvMap.put(splits[0], Arrays.asList(new String[] {splits[1]}));
      }
    }

    int index = 0;
    for (String appName : appEnvMap.keySet()) {
      EnvironmentNode appNode = new EnvironmentNode(appName, true);
      envTreeModel.insertNodeInto(appNode, rootNode, index++);
      int envIndex = 0;
      for (String env : appEnvMap.get(appName)) {
        envTreeModel.insertNodeInto(new EnvironmentNode(env, false), appNode, envIndex++);
      }
    }
    envTreeModel.reload();

    for (String element : configs) {
      configListModel.addElement(element);
    }
    expandAllNodes();
  }

  // private void generateSampleDataForTree() {
  // EnvironmentNode widget_app = new EnvironmentNode("Widget", true);
  // EnvironmentNode portal_app = new EnvironmentNode("Portal", true);
  //
  // envTreeModel.insertNodeInto(widget_app, rootNode, 0);
  // envTreeModel.insertNodeInto(portal_app, rootNode, 1);
  //
  // envTreeModel.insertNodeInto(new EnvironmentNode("Default", false), widget_app, 0);
  // envTreeModel.insertNodeInto(new EnvironmentNode("Designer", false), widget_app, 1);
  // envTreeModel.insertNodeInto(new EnvironmentNode("GreenIT", false), widget_app, 2);
  //
  // envTreeModel.insertNodeInto(new EnvironmentNode("RedIT", false), portal_app, 0);
  // envTreeModel.insertNodeInto(new EnvironmentNode("Develop", false), portal_app, 1);
  // envTreeModel.insertNodeInto(new EnvironmentNode("ShouldWork", false), portal_app, 2);
  // envTreeModel.insertNodeInto(new EnvironmentNode("ShouldNotWork", false), portal_app, 3);
  //
  // }
  // private void generateSampleDataForList() {
  // configListModel.addElement("Config 1");
  // configListModel.addElement("Config 1");
  // }
}
