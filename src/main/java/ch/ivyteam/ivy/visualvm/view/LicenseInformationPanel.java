/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ch.ivyteam.ivy.visualvm.view;

import ch.ivyteam.ivy.visualvm.model.IvyLicenseInfo;
import ch.ivyteam.ivy.visualvm.util.DataUtils;
import java.text.MessageFormat;

/**
 *
 * @author thtam
 */
@SuppressWarnings("PMD.SingularField")
public class LicenseInformationPanel extends javax.swing.JPanel {

  private final IvyLicenseInfo fLicenseInfo;
  private static final long MILISECONDS_IN_ONE_SECOND = 1000;
  private static final long MILISECONDS_IN_ONE_MINUTE = 60 * MILISECONDS_IN_ONE_SECOND;
  private static final long MILISECONDS_IN_ONE_HOUR = 60 * MILISECONDS_IN_ONE_MINUTE;
  public static final long MILISECONDS_IN_ONE_DAY = 24 * MILISECONDS_IN_ONE_HOUR;

  private static final String WARNING_ICON_PATH = "/resources/icons/license_warning.png";
  private static final String ERROR_ICON_PATH = "/resources/icons/license_error.png";
  private static final String WARNING_COLOR = "#F38630";
  private static final String ERROR_COLOR = "#FF0000";
  private static final String TABLE_START = "<table border='0' celspacing='5' celpadding='0'>";
  private static final String TABLE_END = "</table>";
  private static final String TR_TD_START = "<tr><td>";
  private static final String TD_TR_END = "</td></tr>";
  private static final String TD_START = "<td>";
  private static final String TD_END = "</td>";

  private static final String EXPIRE_IN_30_DAYS_WARNING
          = "Your license will expire on {0}. "
          + "If the license is expired the server will no longer start. "
          + "Please contact your sales representative to request a new license!";
  private static final String EXPIRED_WARNING
          = "Your license has expired on {0}. "
          + "You will not be able to restart your server. "
          + "Please contact your sales representative to request a new license!";
  private static final String USERS_80_PERCENT_EXCEEDED_WARNING
          = "The number of users has nearly reached the license limit. Please consider to contact your "
          + "sales representative to request a new license!";
  private static final String USERS_90_PERCENT_EXCEEDED_WARNING
          = "The number of users has almost reached the license limit. Please consider to contact your "
          + "sales representative to request a new license!";
  private static final String USERS_EXCEEDED_WARNING
          = "Cannot create more users because the maximum users that are allowed by your license has "
          + "exceeded. Please contact your sales representative to request a new license!";
  private static final String SESSIONS_90_PERCENT_EXCEEDED_WARNING
          = "The number of sessions has almost reached the license limit. Please consider to contact your "
          + "sales representative to request a new license!";
  private static final String SESSIONS_EXCEEDED_WARNING
          = "The maximum sessions that are allowed by your license has been reached. "
          + "Please contact your sales representative to request a new license!";
  private static final String SESSIONS_150_PERCENT_EXCEEDED_WARNING
          = "Cannot create session because the maximum session that are allowed by your license has exceeded "
          + "by a factor of 50%. Please contact your sales representative to request a new license!";
  private int fNamedUsers;
  private int fConcurrentUsers;
  private long fRemainingTime = Long.MAX_VALUE;

  /**
   * Creates new form LicenseInformationPanel
   */
  public LicenseInformationPanel(IvyLicenseInfo licenseInfo) {
    initComponents();
    fLicenseInfo = licenseInfo;
  }

  /* CHECKSTYLE:OFF */
  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
   * code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings({"unchecked", "PMD"})
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jScrollPane2 = new javax.swing.JScrollPane();
    htmlLabelPanel1 = new ch.ivyteam.ivy.visualvm.view.HtmlLabelPanel();

    setBackground(new java.awt.Color(255, 255, 255));
    setLayout(new java.awt.GridBagLayout());

    jScrollPane2.setBorder(null);
    jScrollPane2.setViewportView(htmlLabelPanel1);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    add(jScrollPane2, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private ch.ivyteam.ivy.visualvm.view.HtmlLabelPanel htmlLabelPanel1;
  private javax.swing.JScrollPane jScrollPane2;
  // End of variables declaration//GEN-END:variables
  /* CHECKSTYLE:ON */

  public void setLicenseData(long remainingTime, int namedUsers, int concurrentUsers) {
    fRemainingTime = remainingTime;
    fNamedUsers = namedUsers;
    fConcurrentUsers = concurrentUsers;
    if (fLicenseInfo != null) {
      htmlLabelPanel1.setText(toHTMLString());
    }
  }

  public String toHTMLString() {
    StringBuilder html = new StringBuilder("<html><body style=\"font-family:tahoma;font-size:11\">");
    appendExpireWarning(html);
    appendUsersLimitWarning(html);
    appendSessionsLimitWarning(html);

    html.append(TABLE_START);
    appendLicenseeOrganisation(html);
    appendLicenseeIndividual(html);
    appendHostName(html);
    appendKeyVersion(html);
    appendValidFrom(html);
    appendValidUntil(html);
    appendSupportRIA(html);
    appendElementsLimit(html);
    appendUsersLimit(html);
    appendSessionsLimit(html);

    html.append(TABLE_END);
    html.append("</body></html>");
    return html.toString();
  }

  private void appendSessionsLimit(StringBuilder html) {
    if (fLicenseInfo.getServerSessionsLimit() > 0) {
      html.append(TR_TD_START);
      html.append("Concurrent Users Limit: ").append(TD_END);
      html.append(TD_START).append(fLicenseInfo.getServerSessionsLimit());
      html.append(TD_TR_END);
    }
  }

  private void appendUsersLimit(StringBuilder html) {
    if (fLicenseInfo.getServerUsersLimit() > 0) {
      html.append(TR_TD_START);
      html.append("Named Users Limit: ").append(TD_END);
      html.append(TD_START).append(fLicenseInfo.getServerUsersLimit());
      html.append(TD_TR_END);
    }
  }

  private void appendElementsLimit(StringBuilder html) {
    if (fLicenseInfo.getServerElementsLimit() > 0) {
      html.append(TR_TD_START);
      html.append("Elements Limit: ").append(TD_END);
      html.append(TD_START).append(fLicenseInfo.getServerElementsLimit());
      html.append(TD_TR_END);
    }
  }

  private void appendSupportRIA(StringBuilder html) {
    html.append(TR_TD_START);
    html.append("Supports RIA: ").append(TD_END);
    html.append(TD_START).append(fLicenseInfo.isServerRIA() ? "Yes" : "No");
    html.append(TD_TR_END);
  }

  private void appendValidUntil(StringBuilder html) {
    if (fLicenseInfo.getLicenseValidUntil() != null) {
      html.append(TR_TD_START);
      html.append("Expires: ").append(TD_END);
      html.append(TD_START).append(DataUtils.dateToString(fLicenseInfo.getLicenseValidUntil()));
      html.append(TD_TR_END);
    }
  }

  private void appendValidFrom(StringBuilder html) {
    if (fLicenseInfo.getLicenseValidFrom() != null) {
      html.append(TR_TD_START);
      html.append("Valid From: ").append(TD_END);
      html.append(TD_START).append(DataUtils.dateToString(fLicenseInfo.getLicenseValidFrom()));
      html.append(TD_TR_END);
    }
  }

  private void appendKeyVersion(StringBuilder html) {
    if (fLicenseInfo.getLicenseKeyVersion() != null) {
      html.append(TR_TD_START);
      html.append("Version: ").append(TD_END);
      html.append(TD_START).append(fLicenseInfo.getLicenseKeyVersion().replace("xpertline/", ""));
      html.append(TD_TR_END);
    }
  }

  private void appendHostName(StringBuilder html) {
    if (fLicenseInfo.getHostName() != null) {
      html.append(TR_TD_START);
      html.append("Host Name: ").append(TD_END);
      html.append(TD_START).append(fLicenseInfo.getHostName());
      html.append(TD_TR_END);
    }
  }

  private void appendLicenseeIndividual(StringBuilder html) {
    if (fLicenseInfo.getLicenseeIndividual() != null) {
      html.append(TR_TD_START);
      html.append("Individual: ").append(TD_END);
      html.append(TD_START).append(fLicenseInfo.getLicenseeIndividual());
      html.append(TD_TR_END);
    }
  }

  private void appendLicenseeOrganisation(StringBuilder html) {
    if (fLicenseInfo.getLicenseeOrganisation() != null) {
      html.append(TR_TD_START);
      html.append("Organization: ").append(TD_END);
      html.append(TD_START).append(fLicenseInfo.getLicenseeOrganisation());
      html.append(TD_TR_END);
    }
  }

  private void appendSessionsLimitWarning(StringBuilder html) {
    if (fLicenseInfo.getServerSessionsLimit() > 0) {
      String warningMsg = null;
      String iconPath = WARNING_ICON_PATH;
      String color = WARNING_COLOR; //yellow
      int threshold90 = (int) Math.floor(fLicenseInfo.getServerSessionsLimit() * 0.9);
      int threshold150 = (int) Math.floor(fLicenseInfo.getServerSessionsLimit() * 1.5);
      if (fConcurrentUsers >= threshold90 && fConcurrentUsers < fLicenseInfo.getServerSessionsLimit()) {
        warningMsg = SESSIONS_90_PERCENT_EXCEEDED_WARNING;
      } else if (fConcurrentUsers >= fLicenseInfo.getServerSessionsLimit()
              && fConcurrentUsers < threshold150) {
        warningMsg = SESSIONS_EXCEEDED_WARNING;
        color = ERROR_COLOR;
      } else if (fConcurrentUsers == threshold150) {
        warningMsg = SESSIONS_150_PERCENT_EXCEEDED_WARNING;
        color = ERROR_COLOR;
        iconPath = ERROR_ICON_PATH;
      }
      if (warningMsg == null) {
        return;
      }
      appendWarning(iconPath, warningMsg, color, html);
    }
  }

  private void appendUsersLimitWarning(StringBuilder html) {
    if (fLicenseInfo.getServerUsersLimit() > 0) {
      String warningMsg = null;
      String iconPath = WARNING_ICON_PATH;
      String color = WARNING_COLOR; //yellow
      int threshold80 = (int) Math.floor(fLicenseInfo.getServerUsersLimit() * 0.8);
      int threshold90 = (int) Math.floor(fLicenseInfo.getServerUsersLimit() * 0.9);
      if (fNamedUsers >= threshold80 && fNamedUsers < threshold90) {
        warningMsg = USERS_80_PERCENT_EXCEEDED_WARNING;
      } else if (fNamedUsers >= threshold90 && fNamedUsers < fLicenseInfo.getServerUsersLimit()) {
        warningMsg = USERS_90_PERCENT_EXCEEDED_WARNING;
        color = ERROR_COLOR;
      } else if (fNamedUsers == fLicenseInfo.getServerUsersLimit()) {
        warningMsg = USERS_EXCEEDED_WARNING;
        color = ERROR_COLOR;
        iconPath = ERROR_ICON_PATH;
      }
      if (warningMsg == null) {
        return;
      }
      appendWarning(iconPath, warningMsg, color, html);
    }
  }

  private void appendExpireWarning(StringBuilder html) {
    if (fLicenseInfo.getLicenseValidUntil() != null) {
      String iconPath = null;
      String warningMsg = null;
      String color = WARNING_COLOR; //yellow
      String expireDateString = DataUtils.dateToString(fLicenseInfo.getLicenseValidUntil());

      if (isLicenseError()) {
        warningMsg = MessageFormat.format(EXPIRED_WARNING, expireDateString);
        color = ERROR_COLOR;
        iconPath = ERROR_ICON_PATH;
      } else if (isLicenseWarning()) {
        warningMsg = MessageFormat.format(EXPIRE_IN_30_DAYS_WARNING, expireDateString);
        iconPath = WARNING_ICON_PATH;
      }

      if (warningMsg == null) {
        return;
      }
      appendWarning(iconPath, warningMsg, color, html);
    }
  }

  private void appendWarning(String iconPath, String warningMsg, String color, StringBuilder html) {
    String iconTag = createIconTag(iconPath);
    String htmlWarningMsg = createFontTag(warningMsg, color);
    html.append(TABLE_START)
            .append(TR_TD_START)
            .append(iconTag)
            .append(TD_END)
            .append(TD_START)
            .append(htmlWarningMsg)
            .append(TD_TR_END)
            .append(TABLE_END);
  }

  private boolean isLicenseWarning() {
    return fRemainingTime < 30 * LicenseInformationPanel.MILISECONDS_IN_ONE_DAY;
  }

  private boolean isLicenseError() {
    return fRemainingTime <= 0;
  }

  private String createFontTag(String message, String color) {
    return "<font color='" + color + "'>" + message + "</font>";
  }

  private String createIconTag(String iconPath) {
    return "<img src='" + getClass().getResource(iconPath) + "'>";
  }

}
