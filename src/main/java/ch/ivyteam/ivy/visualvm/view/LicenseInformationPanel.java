/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ch.ivyteam.ivy.visualvm.view;

import ch.ivyteam.ivy.visualvm.model.IvyLicenseInfo;
import ch.ivyteam.ivy.visualvm.util.DataUtils;
import java.text.MessageFormat;

/**
 *
 * @author thtam
 */
@SuppressWarnings("PMD.SingularField")
public class LicenseInformationPanel extends javax.swing.JPanel {

  private final IvyLicenseInfo fLicenseInfo;
  private static final long MILISECONDS_IN_ONE_SECOND = 1000;
  private static final long MILISECONDS_IN_ONE_MINUTE = 60 * MILISECONDS_IN_ONE_SECOND;
  private static final long MILISECONDS_IN_ONE_HOUR = 60 * MILISECONDS_IN_ONE_MINUTE;
  public static final long MILISECONDS_IN_ONE_DAY = 24 * MILISECONDS_IN_ONE_HOUR;

  private static final String WARNING_ICON_PATH = "/resources/icons/license_warning.png";
  private static final String ERROR_ICON_PATH = "/resources/icons/license_error.png";
  private static final String WARNING_COLOR = "#F38630";
  private static final String TABLE_START = "<table border='0' celspacing='5' celpadding='0'>";
  private static final String TABLE_END = "</table>";
  private static final String TR_TD_START = "<tr><td>";
  private static final String TD_TR_END = "</td></tr>";
  private static final String TD_START = "<td>";
  private static final String TD_END = "</td>";

  private static final String EXPIRE_IN_30_DAYS_WARNING
          = "Your licence will expire on {0}. "
          + "If the licence is expired the server will no longer start. "
          + "Please request a new licence now!";
  private static final String EXPIRED_WARNING
          = "Your licence has expired on {0}. "
          + "You will not be able to restart your server. "
          + "Please request a new licence now!";
  private static final String USERS_EXCEEDED_WARNING
          = "Cannot create more users because the maximum users that are allowed by your licence has "
          + "exceeded";
  private static final String SESSIONS_EXCEEDED_WARNING
          = "The maximum sessions that are allowed by your licence has been reached.";
  private static final String SESSIONS_EXCEEDED_50_PERCENT_WARNING
          = "Cannot create session because the maximum session that are allowed by your licence has exceeded "
          + "by a factor of 50%.";
  private int fNamedUsers;
  private int fConcurrentUsers;
  private long fRemainingTime = Long.MAX_VALUE;

  /**
   * Creates new form LicenseInformationPanel
   */
  public LicenseInformationPanel(IvyLicenseInfo licenseInfo) {
    initComponents();
    fLicenseInfo = licenseInfo;
  }

  /* CHECKSTYLE:OFF */
  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
   * code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings({"unchecked", "PMD"})
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jScrollPane2 = new javax.swing.JScrollPane();
    htmlLabelPanel1 = new ch.ivyteam.ivy.visualvm.view.HtmlLabelPanel();

    setBackground(new java.awt.Color(255, 255, 255));
    setLayout(new java.awt.GridBagLayout());

    jScrollPane2.setBorder(null);
    jScrollPane2.setViewportView(htmlLabelPanel1);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    add(jScrollPane2, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private ch.ivyteam.ivy.visualvm.view.HtmlLabelPanel htmlLabelPanel1;
  private javax.swing.JScrollPane jScrollPane2;
  // End of variables declaration//GEN-END:variables
  /* CHECKSTYLE:ON */

  public void setLicenseData(long remainingTime, int namedUsers, int concurrentUsers) {
    fRemainingTime = remainingTime;
    fNamedUsers = namedUsers;
    fConcurrentUsers = concurrentUsers;
    if (fLicenseInfo != null) {
      htmlLabelPanel1.setText(toHTMLString());
    }
  }

  public String toHTMLString() {
    StringBuilder html = new StringBuilder("<html><body style=\"font-family:tahoma;font-size:11\">");
    appendExpireWarning(html);
    appendUsersLimitWarning(html);
    appendSessionsLimitWarning(html);

    html.append(TABLE_START);
    appendLicenseeOrganisation(html);
    appendLicenseeIndividual(html);
    appendHostName(html);
    appendKeyVersion(html);
    appendValidFrom(html);
    appendValidUntil(html);
    appendSupportRIA(html);
    appendElementsLimit(html);
    appendUsersLimit(html);
    appendSessionsLimit(html);

    html.append(TABLE_END);
    html.append("</body></html>");
    return html.toString();
  }

  private void appendSessionsLimit(StringBuilder html) {
    if (fLicenseInfo.getServerSessionsLimit() > 0) {
      html.append(TR_TD_START);
      html.append("Concurrent Users Limit: ").append(TD_END);
      html.append(TD_START).append(fLicenseInfo.getServerSessionsLimit());
      html.append(TD_TR_END);
    }
  }

  private void appendUsersLimit(StringBuilder html) {
    if (fLicenseInfo.getServerUsersLimit() > 0) {
      html.append(TR_TD_START);
      html.append("Named Users Limit: ").append(TD_END);
      html.append(TD_START).append(fLicenseInfo.getServerUsersLimit());
      html.append(TD_TR_END);
    }
  }

  private void appendElementsLimit(StringBuilder html) {
    if (fLicenseInfo.getServerElementsLimit() > 0) {
      html.append(TR_TD_START);
      html.append("Elements Limit: ").append(TD_END);
      html.append(TD_START).append(fLicenseInfo.getServerElementsLimit());
      html.append(TD_TR_END);
    }
  }

  private void appendSupportRIA(StringBuilder html) {
    html.append(TR_TD_START);
    html.append("Supports RIA: ").append(TD_END);
    html.append(TD_START).append(fLicenseInfo.isServerRIA() ? "Yes" : "No");
    html.append(TD_TR_END);
  }

  private void appendValidUntil(StringBuilder html) {
    if (fLicenseInfo.getLicenseValidUntil() != null) {
      html.append(TR_TD_START);
      html.append("Expires: ").append(TD_END);
      html.append(TD_START).append(DataUtils.toDateString(fLicenseInfo.getLicenseValidUntil()));
      html.append(TD_TR_END);
    }
  }

  private void appendValidFrom(StringBuilder html) {
    if (fLicenseInfo.getLicenseValidFrom() != null) {
      html.append(TR_TD_START);
      html.append("Valid From: ").append(TD_END);
      html.append(TD_START).append(DataUtils.toDateString(fLicenseInfo.getLicenseValidFrom()));
      html.append(TD_TR_END);
    }
  }

  private void appendKeyVersion(StringBuilder html) {
    if (fLicenseInfo.getLicenseKeyVersion() != null) {
      html.append(TR_TD_START);
      html.append("Version: ").append(TD_END);
      html.append(TD_START).append(fLicenseInfo.getLicenseKeyVersion().replace("xpertline/", ""));
      html.append(TD_TR_END);
    }
  }

  private void appendHostName(StringBuilder html) {
    if (fLicenseInfo.getHostName() != null) {
      html.append(TR_TD_START);
      html.append("Host Name: ").append(TD_END);
      html.append(TD_START).append(fLicenseInfo.getHostName());
      html.append(TD_TR_END);
    }
  }

  private void appendLicenseeIndividual(StringBuilder html) {
    if (fLicenseInfo.getLicenseeIndividual() != null) {
      html.append(TR_TD_START);
      html.append("Individual: ").append(TD_END);
      html.append(TD_START).append(fLicenseInfo.getLicenseeIndividual());
      html.append(TD_TR_END);
    }
  }

  private void appendLicenseeOrganisation(StringBuilder html) {
    if (fLicenseInfo.getLicenseeOrganisation() != null) {
      html.append(TR_TD_START);
      html.append("Organization: ").append(TD_END);
      html.append(TD_START).append(fLicenseInfo.getLicenseeOrganisation());
      html.append(TD_TR_END);
    }
  }

  private void appendSessionsLimitWarning(StringBuilder html) {
    if (fLicenseInfo.getServerSessionsLimit() > 0 && getConcurrentUserLimitWarningInHTML() != null) {
      html.append(TABLE_START).append(TR_TD_START);
      html.append(createIconTag(WARNING_ICON_PATH)).append(TD_END);
      html.append(TD_START).append(getConcurrentUserLimitWarningInHTML());
      html.append(TD_TR_END).append(TABLE_END);
    }
  }

  private void appendUsersLimitWarning(StringBuilder html) {
    if (fLicenseInfo.getServerUsersLimit() > 0 && getNamedUserLimitWarningInHTML() != null) {
      html.append(TABLE_START).append(TR_TD_START);
      html.append(createIconTag(WARNING_ICON_PATH)).append(TD_END);
      html.append(TD_START).append(getNamedUserLimitWarningInHTML());
      html.append(TD_TR_END).append(TABLE_END);
    }
  }

  private void appendExpireWarning(StringBuilder html) {
    String iconPath = null;
    String expireWarning = null;
    String color = WARNING_COLOR; //yellow
    String expireDateString = DataUtils.toDateString(fLicenseInfo.getLicenseValidUntil());

    if (isLicenseError()) {
      expireWarning = MessageFormat.format(EXPIRED_WARNING, expireDateString);
      color = "red";
      iconPath = ERROR_ICON_PATH;
    } else if (isLicenseWarning()) {
      expireWarning = MessageFormat.format(EXPIRE_IN_30_DAYS_WARNING, expireDateString);
      iconPath = WARNING_ICON_PATH;
    }

    if (expireWarning == null) {
      return;
    }

    String icon = createIconTag(iconPath);
    String warningMsg = createFontTag(expireWarning, color);
    html.append(TABLE_START);
    html.append(TR_TD_START).append(icon).append(TD_END);
    html.append(TD_START).append(warningMsg).append(TD_TR_END);
    html.append(TABLE_END);
  }

  private boolean isLicenseWarning() {
    return fRemainingTime < 30 * LicenseInformationPanel.MILISECONDS_IN_ONE_DAY;
  }

  private boolean isLicenseError() {
    return fRemainingTime <= 0;
  }

  private String getNamedUserLimitWarningInHTML() {
    String warning = null;
    if (fNamedUsers >= fLicenseInfo.getServerUsersLimit()) {
      warning = USERS_EXCEEDED_WARNING;
    }
    if (warning == null) {
      return null;
    }
    return createFontTag(warning, WARNING_COLOR);
  }

  private String getConcurrentUserLimitWarningInHTML() {
    String warning = null;
    double factor = fConcurrentUsers / fLicenseInfo.getServerSessionsLimit();
    if (factor >= 1 && factor < 1.5) {
      warning = SESSIONS_EXCEEDED_WARNING;
    } else if (factor >= 1.5) {
      warning = SESSIONS_EXCEEDED_50_PERCENT_WARNING;
    }
    if (warning == null) {
      return null;
    }
    return createFontTag(warning, WARNING_COLOR);
  }

  private String createFontTag(String message, String color) {
    return "<font color='" + color + "'>" + message + "</font>";
  }

  private String createIconTag(String iconPath) {
    return "<img src='" + getClass().getResource(iconPath) + "'>";
  }
}
